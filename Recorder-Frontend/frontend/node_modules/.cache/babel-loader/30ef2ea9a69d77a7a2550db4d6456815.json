{"ast":null,"code":"var _jsxFileName = \"/Users/modsiw/Programming/Recorder-Project/backend/frontend/src/pages/Editor.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { useNavigate } from 'react-router-dom';\n// import { registerPost } from '../components/Editor/actions/action';\n// import '../components/Editor/index.css';\n// import { styled, alpha } from '@mui/material/styles';\n// import { Box, Stack, Button, Divider, Input, Menu, MenuItem } from '@mui/material';\n// // EditIcon, ArchiveIcon, FileCopyIcon, MoreHorizIcon\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\n// import { StylesProvider } from '@mui/styles';\n// import ReactHtmlParser from 'react-html-parser';\n// import axios from 'axios';\n// import { CKEditor } from '@ckeditor/ckeditor5-react';\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n// const StyledMenu = styled((props) => (\n//     <Menu\n//       elevation={0}\n//       anchorOrigin={{\n//         vertical: 'bottom',\n//         horizontal: 'left',\n//       }}\n//       transformOrigin={{\n//         vertical: 'top',\n//         horizontal: 'left',\n//       }}\n//       {...props}\n//     />\n//   ))(({ theme }) => ({\n//     '& .MuiPaper-root': {\n//       borderRadius: 6,\n//       marginTop: theme.spacing(1),\n//       minWidth: 150,\n//       color:\n//         theme.palette.mode === 'light' ? 'rgb(55, 65, 81)' : theme.palette.grey[300],\n//       boxShadow:\n//         'rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px',\n//       '& .MuiMenu-list': {\n//         padding: '4px 0',\n//       },\n//       '& .MuiMenuItem-root': {\n//         '& .MuiSvgIcon-root': {\n//           fontSize: 18,\n//           color: theme.palette.text.secondary,\n//           marginRight: theme.spacing(1.5),\n//         },\n//         '&:active': {\n//           backgroundColor: alpha(\n//             theme.palette.primary.main,\n//             theme.palette.action.selectedOpacity,\n//           ),\n//         },\n//       },\n//     },\n//   }));\n// export default function Editor() {\n//     const [anchorEl, setAnchorEl] = useState(null);\n//     const [category, setCategory] = useState('');\n//     const open = Boolean(anchorEl);\n//     const handleClick = (event) => {\n//         setAnchorEl(event.currentTarget);\n//     };\n//     const handleClose = (event) => {\n//         // console.log('event', event.target.innerText);\n//         setCategory(event.target.innerText);\n//         setAnchorEl(null);\n//     };\n//     // const dispatch = useDispatch();\n//     // const navigate = useNavigate();\n//     // const [Title, setTitle] = useState('');\n//     // const [Content, setContent] = useState('');\n//     // const onSubmitHandler = (e) => {\n//     //     e.preventDefault();\n//     //     console.log('title', Title);\n//     //     console.log('content', Content);\n//     // const onTitleHandler = (e) => {\n//     //     setTitle(e.target.value);\n//     // }\n//     // const onContentHandler = (e) => {\n//     //     setContent(e.target.value);\n//     // }\n//     const [posts, setPosts] = useState({\n//         title: '',\n//         content: ''\n//     })\n//     const [viewPosts, setViewPosts] = useState([]);\n//     useEffect(() => {\n//         axios.get('/board/posts/{post_id}')\n//         .then((response) => {\n//             setViewPosts(response.data);\n//         })\n//     }, [viewPosts])\n//     const submitRegister = () => {\n//         axios.post('/board/posts', {\n//             title: posts.title,\n//             content: posts.content\n//         })\n//         .then(() => {\n//             alert('게시글이 등록되었습니다!');\n//         console.log('title', posts.title)\n//         console.log('content', posts.content)\n//         })\n//     };\n//     const getValue = e => {\n//         const { name, value } = e.target;\n//         setViewPosts({\n//             ...posts,\n//             [name]: value\n//         })\n//     };\n//     return (\n//         <Box \n//         gap={1}\n//         sx={{ \n//         display: 'flex',\n//         flexDirection: 'column', \n//         justifyContent: 'center',\n//         alignItems: 'center',\n//         width: '100vw',\n//         height: '100vh',\n//         backgroundColor: 'white',\n//         }}\n//         >\n//             <Box\n//                 sx={{ \n//                     width: '90%',\n//                     display: 'flex',\n//                 }}\n//             >\n//                 <Button\n//                     id=\"demo-customized-button\"\n//                     aria-controls={open ? 'demo-customized-menu' : undefined}\n//                     aria-haspopup=\"true\"\n//                     aria-expanded={open ? 'true' : undefined}\n//                     variant=\"outlined\"\n//                     disableElevation\n//                     onClick={handleClick}\n//                     endIcon={<KeyboardArrowDownIcon />}\n//                     sx={{ \n//                         width: 150,\n//                         display: 'flex',\n//                     }}\n//                 >   \n//                     {category=='' ? '카테고리' : category}\n//                 </Button>\n//                 <StyledMenu\n//                     id=\"demo-customized-menu\"\n//                     MenuListProps={{\n//                     'aria-labelledby': 'demo-customized-button',\n//                     }}\n//                     anchorEl={anchorEl}\n//                     open={open}\n//                     onClose={handleClose}\n//                 >\n//                     <MenuItem onClick={handleClose} disableRipple>\n//                         파이썬\n//                     </MenuItem>\n//                     <MenuItem onClick={handleClose} disableRipple>\n//                         자바\n//                     </MenuItem>\n//                     <MenuItem onClick={handleClose} disableRipple>\n//                         자바스크립트\n//                     </MenuItem>\n//                     <MenuItem onClick={handleClose} disableRipple>\n//                         리액트\n//                     </MenuItem>\n//                 </StyledMenu>\n//             </Box>\n//           <Box\n//                 sx={{ \n//                     width: '90%',\n//                 }}\n//             >\n//                 <Input \n//                     placeholder=\"제목\" \n//                     sx={{ \n//                         width: '100%',\n//                         px: '10px',\n//                         fontSize: 'h5.fontSize',\n//                         fontStyle: 'bold',\n//                     }}\n//                     onChange={getValue}\n//                     // onChange={onTitleHandler}  \n//                 />\n//             </Box>\n//             <Box \n//                 sx={{ \n//                     color: 'black',\n//                     width: '90%',\n//                 }}\n//             >\n//                 <CKEditor\n//                     editor={ ClassicEditor }\n//                     onReady={ editor => {\n//                         console.log( 'Editor is ready to use!', editor );\n//                     } }\n//                     onChange={ \n//                         ( event, editor ) => {\n//                         const data = editor.getData();\n//                         console.log( { event, editor, data } );\n//                         setPosts({\n//                             ...posts,\n//                             content: data\n//                         }) }\n//                      }\n//                     onBlur={ ( event, editor ) => {\n//                         console.log( 'Blur.', editor );\n//                     } }\n//                     onFocus={ ( event, editor ) => {\n//                         console.log( 'Focus.', editor );\n//                     } }\n//                 />\n//             </Box>\n//             <Divider />\n//             <Box sx={{\n//                     display: 'flex',\n//                     justifyContent: 'flex-end',\n//                     width: '90%',\n//                 }}>\n//                 <Stack spacing={1} direction=\"row\" >\n//                     <Button variant=\"outlined\" disableElevation>임시저장</Button>\n//                     <Button variant=\"contained\" onClick={submitRegister} disableElevation >Record</Button>\n//                 </Stack>\n//             </Box>\n//             <Box>\n//                 {viewPosts.map(element =>\n//                     <Box>\n//                         <h2>{element.title}</h2>\n//                         <Box>\n//                             {ReactHtmlParser(element.content)}\n//                         </Box>\n//                     </Box>)}\n//             </Box> \n//     </Box>\n//     );\n// }\n// import React, { useState } from 'react';\n// import { CKEditor } from '@ckeditor/ckeditor5-react';\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n// import ReactHtmlParser from 'react-html-parser';\n// export default function Editor() {\n//     const [addData, setVal] = useState('');\n//     const [addedData, showData ] = useState(0);\n//     const handleChange = (e, editor) => {\n//         const data = editor.getData();\n//         setVal(data);\n//     }\n//     return (\n//         <div className=\"Editor\">\n//             <h2>\n//                 <u>ckeditor5 with React.js</u>\n//             </h2>\n//             <div style = {{width:'700px', display: 'inline-block', textAlign: 'left'}}>\n//                 <div style={{width:'700px', display: 'inline-block', textAlign: 'right', marginBottom: '5px'}}>\n//                     <button style={{backgroundColor:'black', color:'white'}} onClick={()=>showData(!addedData)}>{addedData ? 'Hide Data' : 'Show Data'}</button>\n//                 </div>\n//                 <CKEditor editor={ClassicEditor} data={addData} onChnage={(e, editor) => { handleChange(e, editor) }} />\n//                 <div>\n//                     {addData}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n// import React, { useState } from 'react';\n// import { CKEditor } from '@ckeditor/ckeditor5-react';\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n// import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n// export default function Editor() {\n//     const [data, setData] = useState('');\n//     const handleChange = (e, editor) => {\n//         setData(ReactHtmlParser(editor.getData()));\n//     }\n//     return (\n//         <div>\n//             <CKEditor\n//                 editor={ClassicEditor}\n//                 onChange={handleChange} />\n//             <div>\n//                 {data}\n//             </div>\n//         </div>\n//     )\n// }\nimport { useState, useEffect } from 'react';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport ReactHtmlParser from 'react-html-parser';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Editor() {\n  _s();\n\n  const [Posts, setPosts] = useState({\n    title: '',\n    content: ''\n  });\n  const [viewContent, setViewContent] = useState([]);\n  useEffect(() => {\n    Axios.get('http://localhost:8080/board/posts/{post_id}').then(response => {\n      setViewContent(response.data);\n    });\n  }, [viewContent]);\n\n  const submitReview = () => {\n    Axios.post('http://localhost:8080/board/posts', {\n      title: Posts.title,\n      content: Posts.content\n    }).then(() => {\n      alert('등록 완료!');\n    });\n  };\n\n  const getValue = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setPosts({ ...Posts,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Post Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-container\",\n      children: viewContent.map(element => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '1px solid #333'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: element.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: ReactHtmlParser(element.content)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"title-input\",\n        type: \"text\",\n        placeholder: \"\\uC81C\\uBAA9\",\n        onChange: getValue,\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CKEditor, {\n        editor: ClassicEditor,\n        data: \"<p>Hello from CKEditor 5!</p>\",\n        onReady: editor => {\n          // You can store the \"editor\" and use when it is needed.\n          console.log('Editor is ready to use!', editor);\n        },\n        onChange: (event, editor) => {\n          const data = editor.getData();\n          console.log({\n            event,\n            editor,\n            data\n          });\n          setPosts({ ...Posts,\n            content: data\n          });\n        },\n        onBlur: (event, editor) => {\n          console.log('Blur.', editor);\n        },\n        onFocus: (event, editor) => {\n          console.log('Focus.', editor);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: submitReview,\n      children: \"\\uC785\\uB825\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Editor, \"upX5dNbcS9Q1NZaPN/cZoRLzYSQ=\");\n\n_c = Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"sources":["/Users/modsiw/Programming/Recorder-Project/backend/frontend/src/pages/Editor.js"],"names":["useState","useEffect","CKEditor","ClassicEditor","ReactHtmlParser","Axios","Editor","Posts","setPosts","title","content","viewContent","setViewContent","get","then","response","data","submitReview","post","alert","getValue","e","name","value","target","map","element","border","editor","console","log","event","getData"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA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","sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { useNavigate } from 'react-router-dom';\n// import { registerPost } from '../components/Editor/actions/action';\n// import '../components/Editor/index.css';\n// import { styled, alpha } from '@mui/material/styles';\n// import { Box, Stack, Button, Divider, Input, Menu, MenuItem } from '@mui/material';\n// // EditIcon, ArchiveIcon, FileCopyIcon, MoreHorizIcon\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\n// import { StylesProvider } from '@mui/styles';\n// import ReactHtmlParser from 'react-html-parser';\n// import axios from 'axios';\n\n// import { CKEditor } from '@ckeditor/ckeditor5-react';\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\n// const StyledMenu = styled((props) => (\n//     <Menu\n//       elevation={0}\n//       anchorOrigin={{\n//         vertical: 'bottom',\n//         horizontal: 'left',\n//       }}\n//       transformOrigin={{\n//         vertical: 'top',\n//         horizontal: 'left',\n//       }}\n//       {...props}\n//     />\n//   ))(({ theme }) => ({\n//     '& .MuiPaper-root': {\n//       borderRadius: 6,\n//       marginTop: theme.spacing(1),\n//       minWidth: 150,\n//       color:\n//         theme.palette.mode === 'light' ? 'rgb(55, 65, 81)' : theme.palette.grey[300],\n//       boxShadow:\n//         'rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px',\n//       '& .MuiMenu-list': {\n//         padding: '4px 0',\n//       },\n//       '& .MuiMenuItem-root': {\n//         '& .MuiSvgIcon-root': {\n//           fontSize: 18,\n//           color: theme.palette.text.secondary,\n//           marginRight: theme.spacing(1.5),\n//         },\n//         '&:active': {\n//           backgroundColor: alpha(\n//             theme.palette.primary.main,\n//             theme.palette.action.selectedOpacity,\n//           ),\n//         },\n//       },\n//     },\n//   }));\n\n// export default function Editor() {\n//     const [anchorEl, setAnchorEl] = useState(null);\n//     const [category, setCategory] = useState('');\n//     const open = Boolean(anchorEl);\n//     const handleClick = (event) => {\n//         setAnchorEl(event.currentTarget);\n//     };\n//     const handleClose = (event) => {\n//         // console.log('event', event.target.innerText);\n//         setCategory(event.target.innerText);\n//         setAnchorEl(null);\n//     };\n\n//     // const dispatch = useDispatch();\n//     // const navigate = useNavigate();\n//     // const [Title, setTitle] = useState('');\n//     // const [Content, setContent] = useState('');\n\n//     // const onSubmitHandler = (e) => {\n//     //     e.preventDefault();\n//     //     console.log('title', Title);\n//     //     console.log('content', Content);\n    \n//     // const onTitleHandler = (e) => {\n//     //     setTitle(e.target.value);\n//     // }\n\n//     // const onContentHandler = (e) => {\n//     //     setContent(e.target.value);\n//     // }\n\n//     const [posts, setPosts] = useState({\n//         title: '',\n//         content: ''\n//     })\n\n//     const [viewPosts, setViewPosts] = useState([]);\n\n//     useEffect(() => {\n//         axios.get('/board/posts/{post_id}')\n//         .then((response) => {\n//             setViewPosts(response.data);\n//         })\n//     }, [viewPosts])\n\n\n//     const submitRegister = () => {\n//         axios.post('/board/posts', {\n//             title: posts.title,\n//             content: posts.content\n//         })\n//         .then(() => {\n//             alert('게시글이 등록되었습니다!');\n            \n//         console.log('title', posts.title)\n//         console.log('content', posts.content)\n//         })\n//     };\n\n//     const getValue = e => {\n//         const { name, value } = e.target;\n//         setViewPosts({\n//             ...posts,\n//             [name]: value\n//         })\n//     };\n\n//     return (\n//         <Box \n//         gap={1}\n//         sx={{ \n//         display: 'flex',\n//         flexDirection: 'column', \n//         justifyContent: 'center',\n//         alignItems: 'center',\n//         width: '100vw',\n//         height: '100vh',\n//         backgroundColor: 'white',\n//         }}\n//         >\n//             <Box\n//                 sx={{ \n//                     width: '90%',\n//                     display: 'flex',\n//                 }}\n//             >\n//                 <Button\n//                     id=\"demo-customized-button\"\n//                     aria-controls={open ? 'demo-customized-menu' : undefined}\n//                     aria-haspopup=\"true\"\n//                     aria-expanded={open ? 'true' : undefined}\n//                     variant=\"outlined\"\n//                     disableElevation\n//                     onClick={handleClick}\n//                     endIcon={<KeyboardArrowDownIcon />}\n//                     sx={{ \n//                         width: 150,\n//                         display: 'flex',\n//                     }}\n//                 >   \n//                     {category=='' ? '카테고리' : category}\n//                 </Button>\n//                 <StyledMenu\n//                     id=\"demo-customized-menu\"\n//                     MenuListProps={{\n//                     'aria-labelledby': 'demo-customized-button',\n//                     }}\n//                     anchorEl={anchorEl}\n//                     open={open}\n//                     onClose={handleClose}\n//                 >\n//                     <MenuItem onClick={handleClose} disableRipple>\n//                         파이썬\n//                     </MenuItem>\n//                     <MenuItem onClick={handleClose} disableRipple>\n//                         자바\n//                     </MenuItem>\n//                     <MenuItem onClick={handleClose} disableRipple>\n//                         자바스크립트\n//                     </MenuItem>\n//                     <MenuItem onClick={handleClose} disableRipple>\n//                         리액트\n//                     </MenuItem>\n//                 </StyledMenu>\n//             </Box>\n            \n//           <Box\n//                 sx={{ \n//                     width: '90%',\n//                 }}\n//             >\n//                 <Input \n//                     placeholder=\"제목\" \n//                     sx={{ \n//                         width: '100%',\n//                         px: '10px',\n//                         fontSize: 'h5.fontSize',\n//                         fontStyle: 'bold',\n//                     }}\n//                     onChange={getValue}\n//                     // onChange={onTitleHandler}  \n//                 />\n//             </Box>\n//             <Box \n//                 sx={{ \n//                     color: 'black',\n//                     width: '90%',\n//                 }}\n//             >\n//                 <CKEditor\n//                     editor={ ClassicEditor }\n//                     onReady={ editor => {\n//                         console.log( 'Editor is ready to use!', editor );\n//                     } }\n//                     onChange={ \n//                         ( event, editor ) => {\n//                         const data = editor.getData();\n//                         console.log( { event, editor, data } );\n//                         setPosts({\n//                             ...posts,\n//                             content: data\n//                         }) }\n//                      }\n//                     onBlur={ ( event, editor ) => {\n//                         console.log( 'Blur.', editor );\n//                     } }\n//                     onFocus={ ( event, editor ) => {\n//                         console.log( 'Focus.', editor );\n//                     } }\n//                 />\n//             </Box>\n//             <Divider />\n//             <Box sx={{\n//                     display: 'flex',\n//                     justifyContent: 'flex-end',\n//                     width: '90%',\n//                 }}>\n//                 <Stack spacing={1} direction=\"row\" >\n//                     <Button variant=\"outlined\" disableElevation>임시저장</Button>\n//                     <Button variant=\"contained\" onClick={submitRegister} disableElevation >Record</Button>\n//                 </Stack>\n//             </Box>\n\n//             <Box>\n//                 {viewPosts.map(element =>\n//                     <Box>\n//                         <h2>{element.title}</h2>\n//                         <Box>\n//                             {ReactHtmlParser(element.content)}\n//                         </Box>\n//                     </Box>)}\n//             </Box> \n//     </Box>\n//     );\n// }\n\n// import React, { useState } from 'react';\n// import { CKEditor } from '@ckeditor/ckeditor5-react';\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n// import ReactHtmlParser from 'react-html-parser';\n\n// export default function Editor() {\n//     const [addData, setVal] = useState('');\n//     const [addedData, showData ] = useState(0);\n//     const handleChange = (e, editor) => {\n//         const data = editor.getData();\n//         setVal(data);\n//     }\n\n//     return (\n//         <div className=\"Editor\">\n//             <h2>\n//                 <u>ckeditor5 with React.js</u>\n//             </h2>\n//             <div style = {{width:'700px', display: 'inline-block', textAlign: 'left'}}>\n//                 <div style={{width:'700px', display: 'inline-block', textAlign: 'right', marginBottom: '5px'}}>\n//                     <button style={{backgroundColor:'black', color:'white'}} onClick={()=>showData(!addedData)}>{addedData ? 'Hide Data' : 'Show Data'}</button>\n//                 </div>\n//                 <CKEditor editor={ClassicEditor} data={addData} onChnage={(e, editor) => { handleChange(e, editor) }} />\n//                 <div>\n//                     {addData}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// import React, { useState } from 'react';\n// import { CKEditor } from '@ckeditor/ckeditor5-react';\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n// import ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\n// export default function Editor() {\n//     const [data, setData] = useState('');\n\n//     const handleChange = (e, editor) => {\n//         setData(ReactHtmlParser(editor.getData()));\n//     }\n//     return (\n//         <div>\n//             <CKEditor\n//                 editor={ClassicEditor}\n//                 onChange={handleChange} />\n//             <div>\n//                 {data}\n//             </div>\n//         </div>\n//     )\n// }\n\nimport { useState, useEffect } from 'react';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport ReactHtmlParser from 'react-html-parser';\nimport Axios from 'axios';\n\nexport default function Editor() {\n  const [Posts, setPosts] = useState({\n    title: '',\n    content: ''\n  })\n\n  const [viewContent, setViewContent] = useState([]);\n\n  useEffect(()=>{\n    Axios.get('http://localhost:8080/board/posts/{post_id}').then((response)=>{\n      setViewContent(response.data);\n    })\n  },[viewContent])\n\n  const submitReview = ()=>{\n    Axios.post('http://localhost:8080/board/posts', {\n      title: Posts.title,\n      content: Posts.content\n    }).then(()=>{\n      alert('등록 완료!');\n    })\n  };\n\n  const getValue = e => {\n    const { name, value } = e.target;\n    setPosts({\n      ...Posts,\n      [name]: value\n    })\n  };\n\n\n  return (\n    <div className=\"App\">\n      <h1>Post Register</h1>\n      <div className='movie-container'>\n        {viewContent.map(element =>\n          <div style={{ border: '1px solid #333' }}>\n            <h2>{element.title}</h2>\n            <div>\n              {ReactHtmlParser(element.content)}\n            </div>\n          </div>\n        )}\n      </div>\n      <div className='form-wrapper'>\n        <input className=\"title-input\"\n          type='text'\n          placeholder='제목'\n          onChange={getValue}\n          name='title'\n        />\n        <CKEditor\n          editor={ClassicEditor}\n          data=\"<p>Hello from CKEditor 5!</p>\"\n          onReady={editor => {\n            // You can store the \"editor\" and use when it is needed.\n            console.log('Editor is ready to use!', editor);\n          }}\n          onChange={(event, editor) => {\n            const data = editor.getData();\n            console.log({ event, editor, data });\n            setPosts({\n              ...Posts,\n              content: data\n            })\n          }}\n          onBlur={(event, editor) => {\n            console.log('Blur.', editor);\n          }}\n          onFocus={(event, editor) => {\n            console.log('Focus.', editor);\n          }}\n        />\n      </div>\n      <button\n        className=\"submit-button\"\n        onClick={submitReview}\n        >입력</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}