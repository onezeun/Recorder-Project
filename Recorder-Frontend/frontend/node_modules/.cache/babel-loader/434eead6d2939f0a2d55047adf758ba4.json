{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE, REGISTER_POST, CATEGORY_GET } from './types';\nimport AuthService from '../../services/auth.service';\nexport const register = (email, password, nickname, domain, introduce) => dispatch => {\n  return AuthService.register(email, password, nickname, domain, introduce).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    if (data) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          user: data\n        }\n      });\n      return Promise.resolve();\n    } else {\n      dispatch({\n        type: LOGIN_FAIL\n      }); // dispatch({\n      //   type: SET_MESSAGE,\n      //   payload: message,\n      // });\n\n      return Promise.reject();\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n  return Promise.resolve();\n};\nexport const registerPost = (user_id, categoryId, title, content) => dispatch => {\n  return AuthService.registerPost(user_id, categoryId, title, content).then(response => {\n    dispatch({\n      type: REGISTER_POST\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const getCategory = (categoryId, categoryName) => dispatch => {\n  return AuthService.getCategory(categoryId, categoryName).then(response => {\n    dispatch({\n      type: CATEGORY_GET\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["/app/src/redux/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","REGISTER_POST","CATEGORY_GET","AuthService","register","email","password","nickname","domain","introduce","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout","registerPost","user_id","categoryId","title","content","getCategory","categoryName"],"mappings":"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","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n  REGISTER_POST,\n  CATEGORY_GET\n} from './types';\n\nimport AuthService from '../../services/auth.service';\n\nexport const register =\n  (email, password, nickname, domain, introduce) => (dispatch) => {\n    return AuthService.register(\n      email,\n      password,\n      nickname,\n      domain,\n      introduce,\n    ).then(\n      (response) => {\n        dispatch({\n          type: REGISTER_SUCCESS,\n        });\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: response.data.message,\n        });\n\n        return Promise.resolve();\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n\n        dispatch({\n          type: REGISTER_FAIL,\n        });\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: message,\n        });\n\n        return Promise.reject();\n      },\n    );\n  };\n\nexport const login = (email, password) => (dispatch) => {\n  return AuthService.login(email, password)\n    .then((data) => {\n      if (data){\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: { user: data },\n        });\n  \n        return Promise.resolve();\n\n      } \n      else {\n        dispatch({\n          type: LOGIN_FAIL,\n        });\n\n        // dispatch({\n        //   type: SET_MESSAGE,\n        //   payload: message,\n        // });\n\n        return Promise.reject();\n      }\n    }\n  )\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n\n  return Promise.resolve();\n};\n\nexport const registerPost = (user_id, categoryId, title, content) => (dispatch) => {\n  return AuthService.registerPost(\n    user_id,\n    categoryId,\n    title,\n    content,\n  ).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_POST\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n    return Promise.resolve();\n  },\n  (error) => {\n    const message =\n      (error.response &&\n        error.response.data &&\n        error.response.data.message) ||\n      error.message ||\n      error.toString();\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message,\n    });\n\n    return Promise.reject();\n  },\n);\n};\n\nexport const getCategory = (categoryId, categoryName) => (dispatch) => {\n    return AuthService.getCategory(\n      categoryId,\n      categoryName,\n    ).then(\n      (response) => {\n        dispatch({\n          type: CATEGORY_GET\n        })\n      \n        dispatch({\n          type: SET_MESSAGE,\n          payload: response.data.message,\n        });\n    \n        return Promise.resolve();\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n    \n        dispatch({\n          type: REGISTER_FAIL,\n        });\n    \n        dispatch({\n          type: SET_MESSAGE,\n          payload: message,\n        });\n    \n        return Promise.reject();\n      },\n    );\n    };"]},"metadata":{},"sourceType":"module"}