{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from './types';\nimport AuthService from '../../services/auth.service';\nexport const register = (email, password, nickname, domain, introduce) => dispatch => {\n  return AuthService.register(email, password, nickname, domain, introduce).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/modsiw/Programming/Recorder-Project/backend/frontend/src/redux/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","email","password","nickname","domain","introduce","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,WANF,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,OAAO,MAAMC,QAAQ,GACnB,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4BC,MAA5B,EAAoCC,SAApC,KAAmDC,QAAD,IAAc;AAC9D,SAAOP,WAAW,CAACC,QAAZ,CACLC,KADK,EAELC,QAFK,EAGLC,QAHK,EAILC,MAJK,EAKLC,SALK,EAMLE,IANK,CAOJC,QAAD,IAAc;AACZF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAIAa,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEX,WADC;AAEPY,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFhB,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAlBI,EAmBJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR;AAIAY,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEX,WADC;AAEPY,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACD,GArCI,CAAP;AAuCD,CAzCI;AA2CP,OAAO,MAAMC,KAAK,GAAG,CAACjB,KAAD,EAAQC,QAAR,KAAsBI,QAAD,IAAc;AACtD,SAAOP,WAAW,CAACmB,KAAZ,CAAkBjB,KAAlB,EAAyBC,QAAzB,EAAmCK,IAAnC,CACJI,IAAD,IAAU;AACRL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd,aADC;AAEPe,MAAAA,OAAO,EAAE;AAAES,QAAAA,IAAI,EAAER;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACD,GARI,EASJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAIAU,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEX,WADC;AAEPY,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACD,GA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMG,MAAM,GAAG,MAAOd,QAAD,IAAc;AACxCP,EAAAA,WAAW,CAACqB,MAAZ;AAEAd,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAEZ;AADC,GAAD,CAAR;AAGD,CANM","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from './types';\n\nimport AuthService from '../../services/auth.service';\n\nexport const register =\n  (email, password, nickname, domain, introduce) => (dispatch) => {\n    return AuthService.register(\n      email,\n      password,\n      nickname,\n      domain,\n      introduce,\n    ).then(\n      (response) => {\n        dispatch({\n          type: REGISTER_SUCCESS,\n        });\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: response.data.message,\n        });\n\n        return Promise.resolve();\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n\n        dispatch({\n          type: REGISTER_FAIL,\n        });\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: message,\n        });\n\n        return Promise.reject();\n      },\n    );\n  };\n\nexport const login = (email, password) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    },\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}